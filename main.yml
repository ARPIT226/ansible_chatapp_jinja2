---
- name: create vpc and subnets
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - vault.yml

  vars:
    region: eu-west-2
    vpc_cidr: "10.0.0.0/16"
    public_subnets:
      - { cidr: "10.0.1.0/24", az: "eu-west-2a", name: "public-1a" }
      - { cidr: "10.0.2.0/24", az: "eu-west-2b", name: "public-1b" }
    private_subnets:
      - { cidr: "10.0.3.0/24", az: "eu-west-2a", name: "private-1a" }
      - { cidr: "10.0.4.0/24", az: "eu-west-2b", name: "private-1b" }
    key_name: my-ansible-key
    key_file: "./my-ansible-key.pem"
    ami: "ami-051fd0ca694aa2379"

  tasks:
    - name: create key-pair
      amazon.aws.ec2_key:
        name: "{{key_name}}"
        region: "{{region}}"
        state: present
        file_name: "{{key_file}}"
      no_log: true
      register: keypair

    - name: Set permissions on private key file
      ansible.builtin.file:
        path: "{{key_file}}"
        mode: "0400"

    - name: Set key file as fact
      set_fact:
        key_file_path: "{{ key_file }}"

    - name: create vpc
      amazon.aws.ec2_vpc_net:
        name: "myvpc"
        cidr_block: "{{ vpc_cidr }}"
        region: "{{ region }}"
      register: myvpc

    - name: create public subnets
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ myvpc.vpc.id }}"
        cidr: "{{ item.cidr }}"
        az: "{{ item.az }}"
        map_public: true
        state: present
        region: "{{ region }}"
        tags:
          Name: "{{ item.name }}"
      loop: "{{ public_subnets }}"
      register: public_subnets_results

    - name: create private subnets
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ myvpc.vpc.id }}"
        cidr: "{{ item.cidr }}"
        az: "{{ item.az }}"
        map_public: false
        state: present
        region: "{{ region }}"
        tags:
          Name: "{{ item.name }}"
      loop: "{{ private_subnets }}"
      register: private_subnets_results

    - name: create igw
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ myvpc.vpc.id }}"
        region: "{{ region }}"
        state: present
        tags:
          Name: "my-igw"
      register: igw

    - name: create nat
      amazon.aws.ec2_vpc_nat_gateway:
        subnet_id: "{{ public_subnets_results.results[0].subnet.id }}"
        wait: true
        state: present
        region: "{{ region }}"
        if_exist_do_not_create: true
        tags:
          Name: "my-nat"
      register: nat

    - name: create public rt
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ myvpc.vpc.id }}"
        region: "{{ region }}"
        tags:
          Name: "public-rt"
        subnets: "{{ public_subnets_results.results | map(attribute='subnet.id') | list }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
      register: public_rt

    - name: create private rt
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ myvpc.vpc.id }}"
        region: "{{ region }}"
        tags:
          Name: "private-rt"
        subnets: "{{ private_subnets_results.results | map(attribute='subnet.id') | list }}"
        routes:
          - dest: 0.0.0.0/0
            nat_gateway_id: "{{ nat.nat_gateway_id }}"
      register: private_rt

    - name: create security group for nginx
      amazon.aws.ec2_security_group:
        name: nginx_sg
        description: security group for nginx
        vpc_id: "{{myvpc.vpc.id}}"
        tags:
          Name: "nginx-sg"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0

          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0

    - name: create security group for django
      amazon.aws.ec2_security_group:
        name: django_sg
        description: security group for django
        vpc_id: "{{myvpc.vpc.id}}"
        tags:
          Name: "django-sg"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0

          - proto: tcp
            from_port: 8000
            to_port: 8000
            cidr_ip: 0.0.0.0/0

          - proto: tcp
            from_port: 3306
            to_port: 3306
            cidr_ip: 0.0.0.0/0

    - name: create security group for mysql
      amazon.aws.ec2_security_group:
        name: mysql_sg
        description: security group for mysql
        vpc_id: "{{myvpc.vpc.id}}"
        tags:
          Name: "mysql-sg"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0

          - proto: tcp
            from_port: 3306
            to_port: 3306
            cidr_ip: 0.0.0.0/0

    - name: launch nginx server
      amazon.aws.ec2_instance:
        name: nginx
        key_name: "{{key_name}}"
        instance_type: t2.micro
        image_id: "{{ami}}"
        vpc_subnet_id: "{{public_subnets_results.results[0].subnet.id}}"
        security_group: nginx_sg
        region: "{{region}}"
        wait: true
        network_interfaces:
          - assign_public_ip: true
      register: nginx_instance

    - name: Wait for SSH to be available on nginx
      ansible.builtin.wait_for:
        port: 22
        delay: 5
        timeout: 120
        host: "{{ nginx_instance.instances[0].public_ip_address }}"
      delegate_to: localhost

    - name: Add nginx instance to inventory group
      add_host:
        name: nginx
        ansible_host: "{{ nginx_instance.instances[0].public_ip_address }}"
        ansible_user: ubuntu
        ansible_ssh_private_key_file: "{{ key_file }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
        groups: nginx

    - name: launch django server
      amazon.aws.ec2_instance:
        name: django
        key_name: "{{key_name}}"
        instance_type: t2.micro
        image_id: "{{ami}}"
        vpc_subnet_id: "{{private_subnets_results.results[0].subnet.id}}"
        security_group: django_sg
        region: "{{region}}"
        wait: true
      register: django_instance

    - name: Add django instance to inventory group
      add_host:
        name: django
        ansible_host: "{{ django_instance.instances[0].private_ip_address }}"
        ansible_user: ubuntu
        ansible_ssh_private_key_file: "{{ key_file }}"
        ansible_ssh_common_args: '-o ProxyCommand="ssh -i {{ key_file }} -W %h:%p ubuntu@{{ nginx_instance.instances[0].public_ip_address }}" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
        groups: django

    - name: launch mysql server
      amazon.aws.ec2_instance:
        name: mysql
        key_name: "{{key_name}}"
        instance_type: t2.micro
        image_id: "{{ami}}"
        vpc_subnet_id: "{{private_subnets_results.results[0].subnet.id}}"
        security_group: mysql_sg
        region: "{{region}}"
        wait: true
      register: mysql_instance

    - name: Add mysql instance to inventory group
      add_host:
        name: mysql
        ansible_host: "{{ mysql_instance.instances[0].private_ip_address }}"
        ansible_user: ubuntu
        ansible_ssh_private_key_file: "{{ key_file }}"
        ansible_ssh_common_args: '-o ProxyCommand="ssh -i {{ key_file }} -W %h:%p ubuntu@{{ nginx_instance.instances[0].public_ip_address }}" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
        groups: mysql

    - name: Write inventory.ini file for future use
      ansible.builtin.copy:
        dest: ./inventory.ini
        content: |
          [nginx]
          {{ nginx_instance.instances[0].public_ip_address }}

          [django]
          {{ django_instance.instances[0].private_ip_address }} ansible_ssh_common_args='-o ProxyCommand="ssh -i my-ansible-key.pem -W %h:%p ubuntu@{{ nginx_instance.instances[0].public_ip_address }}"'

          [mysql]
          {{ mysql_instance.instances[0].private_ip_address }} ansible_ssh_common_args='-o ProxyCommand="ssh -i my-ansible-key.pem -W %h:%p ubuntu@{{ nginx_instance.instances[0].public_ip_address }}"'

          [all:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=./my-ansible-key.pem

# copy key to bation host - play
- name: Copy private key to Nginx (Bastion Host)
  hosts: nginx
  become: true
  gather_facts: false

  tasks:
    - name: Copy private key to Bastion host for jump access
      ansible.builtin.copy:
        src: "{{ hostvars['localhost'].key_file_path }}"
        dest: "/home/ubuntu/my-ansible-key.pem"
        owner: ubuntu
        group: ubuntu
        mode: "0400"

# mysql play

- name: Configure MySQL server
  hosts: mysql
  become: yes
  gather_facts: yes
  vars_files:
    - vault.yml

  vars:
    mysql_root_user: root
    mysql_root_password: "{{mysql_root_password}}"
    mysql_db_name: ansible_db
    mysql_user: ansible_user
    mysql_user_password: "{{mysql_user_password}}"

  tasks:
    - name: install pymysql
      apt:
        name: python3-pymysql
        state: present

    - name: install mysql
      apt:
        name: mysql-server
        state: present
        update_cache: yes

    - name: running status of mysql
      service:
        name: mysql
        state: started
        enabled: yes

    - name: Allow MySQL to listen on all interfaces
      lineinfile:
        path: /etc/mysql/mysql.conf.d/mysqld.cnf
        regexp: "^bind-address"
        line: "bind-address = 0.0.0.0"
        state: present
      notify: Restart MySQL

  handlers:
    - name: Restart MySQL
      service:
        name: mysql
        state: restarted

    - name: Set MySQL root password using sudo mysql
      shell: >
        sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '{{ mysql_root_password }}'; FLUSH PRIVILEGES;"
      args:
        executable: /bin/bash

    - name: create mysql database
      community.mysql.mysql_db:
        name: "{{ mysql_db_name }}"
        state: present
        login_user: "{{ mysql_root_user }}"
        login_password: "{{ mysql_root_password }}"

    - name: create mysql user
      community.mysql.mysql_user:
        name: "{{ mysql_user }}"
        password: "{{ mysql_user_password }}"
        priv: "{{ mysql_db_name }}.*:ALL"
        state: present
        host: "%"
        login_user: "{{ mysql_root_user }}"
        login_password: "{{ mysql_root_password }}"

# django play

- name: Configure Django backend server
  hosts: django
  become: yes
  gather_facts: yes
  vars_files:
    - vault.yml

  vars:
    django_app_dir: /chatapp
    django_repo: https://github.com/ARPIT226/chat_app.git
    db_name: ansible_db
    db_user: ansible_user
    db_host: "{{ hostvars['mysql'].ansible_host }}"
    db_port: 3306

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install required system packages
      apt:
        name:
          - software-properties-common
          - git
        state: present

    - name: Add deadsnakes PPA
      apt_repository:
        repo: ppa:deadsnakes/ppa
        state: present

    - name: Update apt cache after adding PPA
      apt:
        update_cache: yes

    - name: Install Python 3.8 and dependencies
      apt:
        name:
          - python3.8
          - python3.8-venv
          - python3.8-distutils
          - gcc
          - python3.8-dev
          - default-libmysqlclient-dev
          - build-essential
          - pkg-config
        state: present

    - name: Clone Django app repo
      git:
        repo: "{{ django_repo }}"
        dest: "{{ django_app_dir }}"
        version: HEAD
        force: yes

    - name: Ensure ubuntu owns the app directory
      file:
        path: "{{ django_app_dir }}"
        owner: ubuntu
        group: ubuntu
        recurse: yes

    - name: Create Python virtual environment
      command: python3.8 -m venv {{ django_app_dir }}/venv
      args:
        creates: "{{ django_app_dir }}/venv"

    - name: Upgrade pip in venv
      command: "{{ django_app_dir }}/venv/bin/pip install --upgrade pip"

    - name: Install pip requirements
      pip:
        requirements: "{{ django_app_dir }}/requirements.txt"
        virtualenv: "{{ django_app_dir }}/venv"

    - name: Install extra Python packages
      pip:
        name:
          - mysqlclient
          - gunicorn
        virtualenv: "{{ django_app_dir }}/venv"

    - name: Set environment variables in /etc/environment
      lineinfile:
        path: /etc/environment
        line: "{{ item }}"
        create: yes
      loop:
        - "DB_NAME={{ db_name }}"
        - "DB_USER={{ db_user }}"
        - "DB_PASSWORD={{ db_password }}"
        - "DB_HOST={{ db_host }}"
        - "DB_PORT={{ db_port }}"

    - name: Export environment variables for current session
      shell: |
        export DB_NAME={{ db_name }}
        export DB_USER={{ db_user }}
        export DB_PASSWORD={{ db_password }}
        export DB_HOST={{ db_host }}
        export DB_PORT={{ db_port }}

    - name: Run Django makemigrations
      command: "{{ django_app_dir }}/venv/bin/python manage.py makemigrations"
      args:
        chdir: "{{ django_app_dir }}/fundoo"

    - name: Run Django migrate
      command: "{{ django_app_dir }}/venv/bin/python manage.py migrate"
      args:
        chdir: "{{ django_app_dir }}/fundoo"

    - name: create gunicorn systemd service file using jinja2
      template: 
        src: templates/gunicorn_service.j2
        dest: /etc/systemd/system/gunicorn.service

    - name: Reload systemd
      systemd:
        daemon_reload: yes

    - name: Enable Gunicorn service
      systemd:
        name: gunicorn
        enabled: yes

    - name: Start Gunicorn service
      systemd:
        name: gunicorn
        state: started

# nginx play

- name: Configure Nginx as frontend reverse proxy
  hosts: nginx
  become: yes
  gather_facts: yes

  vars:
    backend_private_ip: "{{ hostvars['django'].ansible_host }}"

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install nginx
      apt:
        name: nginx
        state: present

    - name: Create Nginx reverse proxy config using jinja2
      template:
        src: templates/nginx_config.j2
        dest: /etc/nginx/sites-available/chat_app.conf

    - name: Remove default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Enable chat_app Nginx site
      file:
        src: /etc/nginx/sites-available/chat_app.conf
        dest: /etc/nginx/sites-enabled/chat_app.conf
        state: link
        force: yes

    - name: Test Nginx configuration
      command: nginx -t

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted
